# GitHub CI build pipeline
name: Containerapp Compose Extension CI build

on:
  push:
    branches:
      - continuing_work
    paths:
      - src/containerapp-compose/**
      - .github/workflows/build.yml
  pull_request:
    branches:
      - continuing_work
    paths:
      - src/containerapp-compose/**

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.6"
          - python-version: "3.7"
          - python-version: "3.8"
          - python-version: "3.9"
          - python-version: "3.10"
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create Virtual Environment
        run: |
          python -m venv env

      - name: Install requirements
        run: |
          source env/bin/activate
          pip install -U pip
          pip install -U pylint
          pip install -U flake8
          pip install -U autopep8
          pip install -U azdev
          pip install -U pycomposefile

      - name: Setup Azure CLI Dev Tooling
        run: |
          source env/bin/activate
          azdev setup --repo '.'
          azdev extension add containerapp
          azdev extension add containerapp-compose

      - name: Style
        run: |
          source env/bin/activate
          azdev style containerapp-compose

      - name: Lint
        if: success() || failure()
        run: |
          source env/bin/activate
          azdev linter containerapp-compose

      - name: Functional Tests
        if: success() || failure()
        run: |
          source env/bin/activate
          azdev test containerapp-compose

  build:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/continuing_work' }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Create Virtual Environment
        run: |
          python -m venv env

      - name: Install requirements
        run: |
          source env/bin/activate
          pip install -U pip
          pip install -U azdev

      - name: Run package creation
        run: |
          source env/bin/activate
          azdev setup --repo '.'
          azdev extension build containerapp-compose

      - name: Upload extension
        uses: actions/upload-artifact@v3
        with:
          name: containerapp-compose-extension
          path: dist/containerapp_compose-?.?.?-py2.py3-none-any.whl

  integration_tests:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/continuing_work' }}
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: containerapp-compose-ci
      ENVIRONMENT_NAME: containerappcomposeci
      TAG: main
    steps:
      - name: Checkout examples repo
        uses: actions/checkout@v3
        with:
          repository: smurawski/docker-compose-examples
          path: examples
      - uses: actions/download-artifact@v3
        with:
          name: containerapp-compose-extension
          path: .
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Add extension
        run: |
          az extension add --name containerapp --upgrade --yes
          az extension add --source ./*.whl --yes
          az extension list
      - name: Extension Help
        run: |
          az containerapp compose --help
          az containerapp compose create --help
      - name: Create resource group
        run: |
          az group create --name $RESOURCE_GROUP --location eastus

      - name: Simple Example
        run: |
          cd examples/simple

          az containerapp compose create \
            --environment $ENVIRONMENT_NAME \
            --resource-group $RESOURCE_GROUP

          URL=$(az containerapp show \
            --resource-group $RESOURCE_GROUP \
            --name helloworld \
            --query 'properties.configuration.ingress.fqdn' \
            -o tsv)
          curl https://$URL

      - name: GRPC Example
        run: |
          cd examples/grpc

          az containerapp compose create \
          --environment $ENVIRONMENT_NAME \
          --resource-group $RESOURCE_GROUP \
          --transport backend=http2

          URL=$(az containerapp show \
            --resource-group $RESOURCE_GROUP \
            --name frontend \
            --query 'properties.configuration.ingress.fqdn' \
            -o tsv)
          curl https://$URL

      - name: Cleanup Resource Group
        run: |
          az group delete --name $RESOURCE_GROUP --yes
